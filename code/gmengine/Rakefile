#!/usr/bin/env rake
begin
  require 'bundler/setup'
rescue LoadError
  puts 'You must `gem install bundler` and `bundle install` to run rake tasks'
end
begin
  require 'rdoc/task'
rescue LoadError
  require 'rdoc/rdoc'
  require 'rake/rdoctask'
  RDoc::Task = Rake::RDocTask
end

RDoc::Task.new(:rdoc) do |rdoc|
  rdoc.rdoc_dir = 'rdoc'
  rdoc.title    = 'Gmengine'
  rdoc.options << '--line-numbers'
  rdoc.rdoc_files.include('README.rdoc')
  rdoc.rdoc_files.include('lib/**/*.rb')
end




Bundler::GemHelper.install_tasks

require 'rspec/core/rake_task'
RSpec::Core::RakeTask.new(:spec => :dummy_app) do |t|
  t.pattern =  File.expand_path('../spec/**/*_spec.rb', __FILE__)
end
task :default => :spec

desc 'Generates a dummy app for testing'
task :dummy_app => [:setup, :install_migrations, :migrate]

task :setup do
  require 'rails'
  require 'gmengine'
  require 'gmengine/generators/dummy_generator'

  dummy = File.expand_path('../spec/dummy', __FILE__)
  sh "rm -rf #{dummy}"
  Gmengine::DummyGenerator.start(
    %W(. --quiet --force --skip-bundle --old-style-hash --dummy-path=#{dummy})
  )
end

task :install_migrations do
  rakefile = File.expand_path('../spec/dummy/Rakefile', __FILE__)
  sh("rake -f #{rakefile} gmengine:install:migrations")
end

task :migrate do
  rakefile = File.expand_path('../spec/dummy/Rakefile', __FILE__)
  sh("rake -f #{rakefile} db:create db:migrate db:test:prepare")
end
